import streamlit as st
import pandas as pd
from datetime import datetime
import os

# –§–∞–π–ª
excel_file = "wortliste_train.xlsx"

# –ï—Å–ª–∏ Excel –µ—Å—Ç—å ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º
if os.path.exists(excel_file):
    df = pd.read_excel(excel_file)
else:
    df = pd.DataFrame(columns=["Wort", "Niveau", "Hinzugef√ºgt am"])

# üü¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üß† –¢—Ä–µ–Ω–∞–∂—ë—Ä –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–ª–æ–≤")

st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ")
neues_wort = st.text_input("–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ:")

if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫"):
    if neues_wort:
        if neues_wort not in df["Wort"].values:
            new_row = {
                "Wort": neues_wort,
                "Niveau": 0,
                "Hinzugef√ºgt am": datetime.now().strftime("%d.%m.%Y"),              
            }
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            df.to_excel(excel_file, index=False)
            st.success(f"‚úÖ –°–ª–æ–≤–æ '{neues_wort}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            st.warning("‚ö†Ô∏è –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
    else:
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º.")
import random
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter
API_KEY = st.secrets["API_KEY"] 
API_URL = "https://openrouter.ai/api/v1/chat/completions"
HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

# –§—É–Ω–∫—Ü–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
def tage_seit(datum):
    try:
        return (datetime.now() - datetime.strptime(str(datum), "%d.%m.%Y")).days
    except:
        return 9999  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –¥–∞—Ç–æ–π

# –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
st.subheader("üéØ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
if st.button("–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"):
    candidates = []
    for index, row in df.iterrows():
        level = int(row["Niveau"])
        if level > 5:
            continue
        tage = tage_seit(row["Hinzugef√ºgt am"])
        if tage >= level ** 2:
            candidates.append(row)

    if not candidates:
        st.info("üòå –ü–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.")
    else:
        wort_info = random.choice(candidates)
        wort = wort_info["Wort"]
        level = wort_info["Niveau"]

        st.write(f"üîç –¢—Ä–µ–Ω–∏—Ä—É–µ–º —Å–ª–æ–≤–æ: **{wort}**")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
        st.session_state["wort"] = wort
        st.session_state["index"] = df[df["Wort"] == wort].index[0]
        st.session_state["Niveau"] = level

        # –°–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (3‚Äì10)
        anzahl = 10

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini
        prompt = (
            f"–ü—Ä–∏–¥—É–º–∞–π {anzahl} –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, "
            f"—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞ '{wort}' (–ø–µ—Ä–µ–≤–æ–¥–∞ —ç—Ç–æ–≥–æ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–ª–æ–≤–∞). "
            f"–ù–∏–∫–∞–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑, –ø–æ–¥–ø–∏—Å–µ–π –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ —Ñ—Ä–∞–∑—ã, –∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. "
            f"–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ API, —Ç–∞–∫ —á—Ç–æ –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    f"—Ñ—Ä–∞–∑–∞ 1\n—Ñ—Ä–∞–∑–∞ 2\n—Ñ—Ä–∞–∑–∞ 3\n..."
        )

        data = {
            "model": "google/gemini-pro",
            "messages": [{"role": "user", "content": prompt}]
        }

        response = requests.post(API_URL, headers=HEADERS, json=data)
        antwort_json = response.json()

        if "choices" in antwort_json:
            saetze = antwort_json["choices"][0]["message"]["content"].strip().split("\n")
            st.session_state["saetze"] = [s for s in saetze if s.strip()]
            st.session_state["√ºbersetzt"] = []
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã.")


if "saetze" in st.session_state:
    st.markdown("### üìö –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:")
    for i, satz in enumerate(st.session_state["saetze"]):
        # –£–∂–µ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ—á–∞–µ–º
        if i < len(st.session_state["√ºbersetzt"]):
            st.markdown(f"- {satz}  \nüëâ **{st.session_state['√ºbersetzt'][i]}**")
        else:
            st.markdown(f"- {satz}")

    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
if st.button("üìò –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"):
    noch_zu_√ºbersetzen = st.session_state["saetze"][len(st.session_state["√ºbersetzt"]):]
    if noch_zu_√ºbersetzen:
        zu_√ºbersetzen = noch_zu_√ºbersetzen[0]
        wort = st.session_state["wort"]

        prompt = (
            f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π: '{zu_√ºbersetzen}', c —É—á–µ—Ç–æ–º —Ç–æ–≥–æ —á—Ç–æ —è —Ç—Ä–µ–Ω–∏—Ä—É—é —Å–ª–æ–≤–æ {wort}. "
            f"–£—á—Ç–∏, —á—Ç–æ —ç—Ç–æ –¥–ª—è API, –ø–æ—Ç–æ–º—É –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π: –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ "
            f"–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π."
        )

        data = {
            "model": "google/gemini-pro",
            "messages": [{"role": "user", "content": prompt}]
        }

        response = requests.post(API_URL, headers=HEADERS, json=data)
        √ºbersetzung = response.json()["choices"][0]["message"]["content"].strip()
        st.session_state["√ºbersetzt"].append(√ºbersetzung)

        # üöÄ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.experimental_rerun()

    # –ö–Ω–æ–ø–∫–∏ "–≤—Å–ø–æ–º–Ω–∏–ª / –Ω–µ –≤—Å–ø–æ–º–Ω–∏–ª"
col1, col2, col3 = st.columns(3)

with col1:
    if st.button("‚úÖ –û—Ç–ª–∏—á–Ω–æ"):
        neuer_wert = min(st.session_state["Niveau"] + 1, 5)
        df.at[st.session_state["index"], "Niveau"] = neuer_wert
        df.at[st.session_state["index"], "Hinzugef√ºgt am"] = datetime.now().strftime("%d.%m.%Y")
        df.to_excel(excel_file, index=False)
        st.success(f"üéâ –û—Ç–ª–∏—á–Ω–æ! –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤–∞ –ø–æ–≤—ã—à–µ–Ω –¥–æ {neuer_wert}")
        st.session_state.clear()

with col2:
    if st.button("‚ûñ –°—Ä–µ–¥–Ω–µ"):
        # –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º, —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –æ–±–Ω–æ–≤–∏–º
        df.at[st.session_state["index"], "Hinzugef√ºgt am"] = datetime.now().strftime("%d.%m.%Y")
        df.to_excel(excel_file, index=False)
        st.info("‚ÑπÔ∏è –£—Ä–æ–≤–µ–Ω—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        st.session_state.clear()

with col3:
    if st.button("‚ùå –ü–ª–æ—Ö–æ"):
        neuer_wert = max(st.session_state["Niveau"] - 1, 0)
        df.at[st.session_state["index"], "Niveau"] = neuer_wert
        df.at[st.session_state["index"], "Hinzugef√ºgt am"] = datetime.now().strftime("%d.%m.%Y")
        df.to_excel(excel_file, index=False)
        st.warning(f"üìâ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–≤–∞ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ {neuer_wert}")
        st.session_state.clear()
    
